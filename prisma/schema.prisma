// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Default Initial Model 
// model ModelName {
//   // CUID
//   id String @id @default(cuid())

// // Timestamps
// createdAt DateTime @default(now())
// updatedAt DateTime @default(now())
// }

// User
model User {
  // CUID
  id String @id @default(cuid())

  // Core - Required
  name        String
  email       String @unique
  password    String
  phoneNumber String @unique
  cpf         String @unique
  role        Roles  @default(USER)

  // Core - Nullable
  avatar String?
  salt   String?

  // Address - Nullable
  postCode          String?
  country           String?
  city              String?
  neighborhood      String?
  address           String?
  addressNumber     Int?
  addressComplement String?

  // Relationship - Required
  Ordes      Ordes[]
  UserCupons UserCupons[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Wallet    Wallet[]
}

model Store {
  // CUID
  id String @id @default(cuid())

  // Core - Required
  name         String @unique
  email        String @unique
  password     String
  socialReazon String
  phoneNumber  String @unique
  cnpj         String @unique

  // Core - Nullable
  role        Roles?  @default(PARTNER)
  description String?
  rate        Float?  @default(5)
  status      Status  @default(PENDING)
  isActive    Boolean @default(false)
  avatar      String?
  salt        String?

  // Address - Nullable
  postCode          String?
  country           String?
  city              String?
  neighborhood      String?
  address           String?
  addressNumber     String?
  addressComplement String?

  // Relationship - Required
  Wallet          Wallet[]
  StoreCategories StoreCategories[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Categories {
  // CUID
  id String @id @default(cuid())

  // Core - Required
  name String @unique

  // Core - Nullable
  isActive Boolean? @default(true)

  // Relationship - Required
  StoreCategories   StoreCategories[]
  ProductCategories ProductCategories[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model StoreCategories {
  // CUID
  id String @id @default(cuid())

  // Core - Required
  storeId    String
  categoryId String

  // Relationship - Required
  category Categories @relation(fields: [categoryId], references: [id])
  store    Store      @relation(fields: [storeId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model ProductCategories {
  // CUID
  id String @id @default(cuid())

  // Core - Required
  productId    Products @relation(fields: [productsId], references: [id])
  categoriesId String

  // Relationship - Required
  category Categories @relation(fields: [categoriesId], references: [id])

  // Timestamps
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  productsId String
}

model Products {
  // CUID
  id String @id @default(cuid())

  // Core - Required
  name  String @unique
  price Float  @default(0)

  // Core - Nullable
  avatar      String?
  description String?
  discount    Float?  @default(0)

  // Relationship - Required
  ProductCategories ProductCategories[]
  Ordes             Ordes[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Ordes {
  // CUID
  id String @id @default(cuid())

  // Core - Required
  userId    String
  productId String
  status    Status @default(PENDING)
  quantity  Int    @default(1)

  // Relationship - Required
  product Products @relation(fields: [productId], references: [id])
  user    User     @relation(fields: [userId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Cupons {
  // CUID
  id String @id @default(cuid())

  // Core - Required
  name    String @unique
  dicount Float  @default(0)
  price   Float  @default(0)

  // Core - Nullable
  description String?

  // Timestamps
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())
  UserCupons UserCupons[]
}

model UserCupons {
  // CUID
  id String @id @default(cuid())

  // Core - Required
  userId   String
  cuponsId String

  // Relationship - Required
  user  User   @relation(fields: [userId], references: [id])
  cupom Cupons @relation(fields: [cuponsId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Wallet {
  // CUID
  id String @id @default(cuid())

  // Core - Required
  available         Float  @default(0)
  bankId            String // Replace to real Bank Ids
  agencyNumber      String
  bankAccountNumber String
  accountBankType   String

  // Relationship - Required
  userId  String
  storeId String

  // Relationship 
  user  User  @relation(fields: [userId], references: [id])
  store Store @relation(fields: [storeId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model ValidationCodes {
  // CUID
  id String @id @default(cuid())

  // Core - Required
  type       String // Email, SMS
  code       String
  isVerifyed Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum Roles {
  USER
  ADMIN
  PARTNER
}

enum Status {
  PENDING
  APPROVED
  REPROVED
}
